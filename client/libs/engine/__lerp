
    //const time_now = new Date().getTime()
    //const frame_time = time_now - this.current_time
    //this.current_time = time_now
    //const NETWORK_TICK = 100

    ////do input
    //const net_delta = time_now - this.last_network_time

    //let nt = new Date().getTime()
    ////do networking
    ////if (net_delta >= NETWORK_TICK) {
    //const frame_new = this.network.get_frame()
    //if (frame_new) {
    //  if (this.last_frame) {
    //    this.last_network_time = time_now
    //    //const frame_new = this.network.get_frame(3)
    //    //const frame_old = this.network.get_frame(4)
    //    const frame_old = this.last_frame

    //    if (frame_new && frame_old) {
    //      const t = time_now - (100 - net_delta)
    //      if (t < frame_old.time) {
    //        this.players = frame_old.state.players
    //        console.log('early')
    //      } else if (t > frame_new.time) {
    //        this.players = frame_new.state.players
    //        console.log('late')
    //      } else {
    //        const total = frame_new.time - frame_old.time
    //        const portion = t - frame_old.time
    //        const factor = portion / total
    //        //const factor = 1/(frame_new.time - frame_old.time)
    //        const players_new = frame_new.state.players
    //        const players_old = frame_old.state.players
    //        const players = []
    //        players_new.forEach((player_new, i) => {
    //          const player_old = players_old[i]
    //          const p = Object.assign(player_new, {})
    //          p.pos.x = player_old.pos.x + factor * (player_new.pos.x - player_old.pos.x)
    //          p.pos.y = player_old.pos.y + factor * (player_new.pos.y - player_old.pos.y)
    //          players.push(p)
    //        })

    //        this.players = players;
    //      }
    //    }
    //  } else {
    //    console.log('no last frame')
    //  }
    //  this.last_frame = frame_new
    ////}
    //} else {
    //  console.log('no new frame')
    //}

    //nt = new Date().getTime() - nt

    //let lt = new Date().getTime()
    ////do logic
    //lt = new Date().getTime() - lt

    //let rt = new Date().getTime()
    //this.renderer.render_frame(1)
    //this.players.forEach((player) => {
    //  this.renderer.render_box(player.pos.x, player.pos.y, 10)
    //})
    //rt = new Date().getTime() - rt

    //this.renderer.ctx.fillStyle = 'rgb(0, 0, 0)'
    //this.renderer.ctx.fillText('render_time: ' + rt, 10, 10)
    //this.renderer.ctx.fillText('logic_time:  ' + lt, 10, 23)

    /*
    const new_frame = this.network.get_frame()
    let next_time = 0
    //let old_frame = null
    if (new_frame) {
      if (!this.last_frame) {
        this.last_frame = new_frame
      } else {
      //if (!this.last_frame) { this.last_frame = { state: { players: [] }}}
      this.last_frame.state.players = this.players
      //old_frame = this.last_frame
      next_time = t + 200

      }
    }

    const interp_t = t / next_time

    if (t <= next_time) {
      const old_frame = this.last_frame
      new_frame.state.players.forEach((new_p, i) => {
        const old_pos = old_frame.state.players[i].pos
        const new_pos = new_p.pos

        if (!this.players[i]) this.players[i] = Object.assign(new_p, {})

        this.players[i].pos = {
          x: old_pos.x + interp_t * (new_pos.x - old_pos.x),
          y: old_pos.y + interp_t * (new_pos.y - old_pos.y),
        }
      })
      //this.last_frame.state.players = this.players
    } else if (new_frame){
      console.log('set')
      this.players = new_frame.state.players
    }
    */


    //const interp_t = (this.accumulator / timestep)
    //const old_frame = this.last_frame
    //const new_frame = this.network.get_frame()
    //if (!old_frame && new_frame) this.last_frame = new_frame
    //if (old_frame && new_frame) {
    //  //this.players = []

    //  old_frame.state.players.forEach((old_p, i) => {
    //    const old_pos = old_p.pos
    //    const new_pos = new_frame.state.players[i].pos

    //    if (!this.players[i]) this.players[i] = Object.assign(old_p, {})

    //    this.players[i].pos = {
    //      x: old_pos.x + interp_t * (new_pos.x - old_pos.x),
    //      y: old_pos.y + interp_t * (new_pos.y - old_pos.y),
    //    }

    //    //this.players.push(p)
    //  })
    //  //this.last_frame.state.players = this.players
    //}
    //
    //
